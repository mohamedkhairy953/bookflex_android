// Generated by view binder compiler. Do not edit!
package com.folioreader.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.folioreader.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TextSelectionBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final ImageView blueHighlight;

  @NonNull
  public final TextView copySelection;

  @NonNull
  public final TextView defineSelection;

  @NonNull
  public final ImageView deleteHighlight;

  @NonNull
  public final View firstHorizontalDivider;

  @NonNull
  public final LinearLayout firstSectionLayout;

  @NonNull
  public final ImageView greenHighlight;

  @NonNull
  public final HorizontalScrollView highlightScrollView;

  @NonNull
  public final ImageView pinkHighlight;

  @NonNull
  public final TextView shareSelection;

  @NonNull
  public final ImageView underlineHighlight;

  @NonNull
  public final ImageView yellowHighlight;

  private TextSelectionBinding(@NonNull FrameLayout rootView, @NonNull ImageView blueHighlight,
      @NonNull TextView copySelection, @NonNull TextView defineSelection,
      @NonNull ImageView deleteHighlight, @NonNull View firstHorizontalDivider,
      @NonNull LinearLayout firstSectionLayout, @NonNull ImageView greenHighlight,
      @NonNull HorizontalScrollView highlightScrollView, @NonNull ImageView pinkHighlight,
      @NonNull TextView shareSelection, @NonNull ImageView underlineHighlight,
      @NonNull ImageView yellowHighlight) {
    this.rootView = rootView;
    this.blueHighlight = blueHighlight;
    this.copySelection = copySelection;
    this.defineSelection = defineSelection;
    this.deleteHighlight = deleteHighlight;
    this.firstHorizontalDivider = firstHorizontalDivider;
    this.firstSectionLayout = firstSectionLayout;
    this.greenHighlight = greenHighlight;
    this.highlightScrollView = highlightScrollView;
    this.pinkHighlight = pinkHighlight;
    this.shareSelection = shareSelection;
    this.underlineHighlight = underlineHighlight;
    this.yellowHighlight = yellowHighlight;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TextSelectionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TextSelectionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.text_selection, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TextSelectionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.blueHighlight;
      ImageView blueHighlight = ViewBindings.findChildViewById(rootView, id);
      if (blueHighlight == null) {
        break missingId;
      }

      id = R.id.copySelection;
      TextView copySelection = ViewBindings.findChildViewById(rootView, id);
      if (copySelection == null) {
        break missingId;
      }

      id = R.id.defineSelection;
      TextView defineSelection = ViewBindings.findChildViewById(rootView, id);
      if (defineSelection == null) {
        break missingId;
      }

      id = R.id.deleteHighlight;
      ImageView deleteHighlight = ViewBindings.findChildViewById(rootView, id);
      if (deleteHighlight == null) {
        break missingId;
      }

      id = R.id.firstHorizontalDivider;
      View firstHorizontalDivider = ViewBindings.findChildViewById(rootView, id);
      if (firstHorizontalDivider == null) {
        break missingId;
      }

      id = R.id.firstSectionLayout;
      LinearLayout firstSectionLayout = ViewBindings.findChildViewById(rootView, id);
      if (firstSectionLayout == null) {
        break missingId;
      }

      id = R.id.greenHighlight;
      ImageView greenHighlight = ViewBindings.findChildViewById(rootView, id);
      if (greenHighlight == null) {
        break missingId;
      }

      id = R.id.highlightScrollView;
      HorizontalScrollView highlightScrollView = ViewBindings.findChildViewById(rootView, id);
      if (highlightScrollView == null) {
        break missingId;
      }

      id = R.id.pinkHighlight;
      ImageView pinkHighlight = ViewBindings.findChildViewById(rootView, id);
      if (pinkHighlight == null) {
        break missingId;
      }

      id = R.id.shareSelection;
      TextView shareSelection = ViewBindings.findChildViewById(rootView, id);
      if (shareSelection == null) {
        break missingId;
      }

      id = R.id.underlineHighlight;
      ImageView underlineHighlight = ViewBindings.findChildViewById(rootView, id);
      if (underlineHighlight == null) {
        break missingId;
      }

      id = R.id.yellowHighlight;
      ImageView yellowHighlight = ViewBindings.findChildViewById(rootView, id);
      if (yellowHighlight == null) {
        break missingId;
      }

      return new TextSelectionBinding((FrameLayout) rootView, blueHighlight, copySelection,
          defineSelection, deleteHighlight, firstHorizontalDivider, firstSectionLayout,
          greenHighlight, highlightScrollView, pinkHighlight, shareSelection, underlineHighlight,
          yellowHighlight);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
